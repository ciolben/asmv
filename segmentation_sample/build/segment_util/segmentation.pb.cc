// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segmentation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "segmentation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Segment {

namespace {

const ::google::protobuf::Descriptor* SegmentationDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_Region_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_Region_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_Region_Scanline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_Region_Scanline_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_Region_Scanline_Interval_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_Region_Scanline_Interval_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_CompoundRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_CompoundRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* SegmentationDesc_Hierarchy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SegmentationDesc_Hierarchy_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_segmentation_2eproto() {
  protobuf_AddDesc_segmentation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "segmentation.proto");
  GOOGLE_CHECK(file != NULL);
  SegmentationDesc_descriptor_ = file->message_type(0);
  static const int SegmentationDesc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, max_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, hierarchy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, frame_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, frame_height_),
  };
  SegmentationDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_descriptor_,
      SegmentationDesc::default_instance_,
      SegmentationDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc));
  SegmentationDesc_Region_descriptor_ = SegmentationDesc_descriptor_->nested_type(0);
  static const int SegmentationDesc_Region_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region, neighbor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region, top_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region, scanline_),
  };
  SegmentationDesc_Region_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_Region_descriptor_,
      SegmentationDesc_Region::default_instance_,
      SegmentationDesc_Region_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_Region));
  SegmentationDesc_Region_Scanline_descriptor_ = SegmentationDesc_Region_descriptor_->nested_type(0);
  static const int SegmentationDesc_Region_Scanline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region_Scanline, interval_),
  };
  SegmentationDesc_Region_Scanline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_Region_Scanline_descriptor_,
      SegmentationDesc_Region_Scanline::default_instance_,
      SegmentationDesc_Region_Scanline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region_Scanline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region_Scanline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_Region_Scanline));
  SegmentationDesc_Region_Scanline_Interval_descriptor_ = SegmentationDesc_Region_Scanline_descriptor_->nested_type(0);
  static const int SegmentationDesc_Region_Scanline_Interval_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region_Scanline_Interval, left_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region_Scanline_Interval, right_x_),
  };
  SegmentationDesc_Region_Scanline_Interval_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_Region_Scanline_Interval_descriptor_,
      SegmentationDesc_Region_Scanline_Interval::default_instance_,
      SegmentationDesc_Region_Scanline_Interval_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region_Scanline_Interval, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Region_Scanline_Interval, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_Region_Scanline_Interval));
  SegmentationDesc_CompoundRegion_descriptor_ = SegmentationDesc_descriptor_->nested_type(1);
  static const int SegmentationDesc_CompoundRegion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, neighbor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, parent_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, child_id_),
  };
  SegmentationDesc_CompoundRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_CompoundRegion_descriptor_,
      SegmentationDesc_CompoundRegion::default_instance_,
      SegmentationDesc_CompoundRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_CompoundRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_CompoundRegion));
  SegmentationDesc_Hierarchy_descriptor_ = SegmentationDesc_descriptor_->nested_type(2);
  static const int SegmentationDesc_Hierarchy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Hierarchy, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Hierarchy, max_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Hierarchy, region_),
  };
  SegmentationDesc_Hierarchy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SegmentationDesc_Hierarchy_descriptor_,
      SegmentationDesc_Hierarchy::default_instance_,
      SegmentationDesc_Hierarchy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Hierarchy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SegmentationDesc_Hierarchy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SegmentationDesc_Hierarchy));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_segmentation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_descriptor_, &SegmentationDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_Region_descriptor_, &SegmentationDesc_Region::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_Region_Scanline_descriptor_, &SegmentationDesc_Region_Scanline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_Region_Scanline_Interval_descriptor_, &SegmentationDesc_Region_Scanline_Interval::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_CompoundRegion_descriptor_, &SegmentationDesc_CompoundRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SegmentationDesc_Hierarchy_descriptor_, &SegmentationDesc_Hierarchy::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_segmentation_2eproto() {
  delete SegmentationDesc::default_instance_;
  delete SegmentationDesc_reflection_;
  delete SegmentationDesc_Region::default_instance_;
  delete SegmentationDesc_Region_reflection_;
  delete SegmentationDesc_Region_Scanline::default_instance_;
  delete SegmentationDesc_Region_Scanline_reflection_;
  delete SegmentationDesc_Region_Scanline_Interval::default_instance_;
  delete SegmentationDesc_Region_Scanline_Interval_reflection_;
  delete SegmentationDesc_CompoundRegion::default_instance_;
  delete SegmentationDesc_CompoundRegion_reflection_;
  delete SegmentationDesc_Hierarchy::default_instance_;
  delete SegmentationDesc_Hierarchy_reflection_;
}

void protobuf_AddDesc_segmentation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022segmentation.proto\022\007Segment\"\241\005\n\020Segmen"
    "tationDesc\022\016\n\006max_id\030\001 \002(\007\0220\n\006region\030\002 \003"
    "(\0132 .Segment.SegmentationDesc.Region\0226\n\t"
    "hierarchy\030\003 \003(\0132#.Segment.SegmentationDe"
    "sc.Hierarchy\022\026\n\013frame_width\030\004 \001(\005:\0010\022\027\n\014"
    "frame_height\030\005 \001(\005:\0010\032\225\002\n\006Region\022\n\n\002id\030\001"
    " \002(\007\022\014\n\004size\030\002 \002(\007\022\023\n\013neighbor_id\030\003 \003(\007\022"
    "\r\n\005top_y\030\004 \002(\007\022\021\n\tparent_id\030\005 \001(\007\022;\n\010sca"
    "nline\030\006 \003(\0132).Segment.SegmentationDesc.R"
    "egion.Scanline\032}\n\010Scanline\022D\n\010interval\030\001"
    " \003(\01322.Segment.SegmentationDesc.Region.S"
    "canline.Interval\032+\n\010Interval\022\016\n\006left_x\030\001"
    " \002(\007\022\017\n\007right_x\030\002 \002(\007\032d\n\016CompoundRegion\022"
    "\n\n\002id\030\001 \002(\007\022\014\n\004size\030\002 \002(\007\022\023\n\013neighbor_id"
    "\030\003 \003(\007\022\021\n\tparent_id\030\004 \001(\007\022\020\n\010child_id\030\005 "
    "\003(\007\032d\n\tHierarchy\022\r\n\005level\030\001 \002(\007\022\016\n\006max_i"
    "d\030\002 \002(\007\0228\n\006region\030\003 \003(\0132(.Segment.Segmen"
    "tationDesc.CompoundRegion", 705);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "segmentation.proto", &protobuf_RegisterTypes);
  SegmentationDesc::default_instance_ = new SegmentationDesc();
  SegmentationDesc_Region::default_instance_ = new SegmentationDesc_Region();
  SegmentationDesc_Region_Scanline::default_instance_ = new SegmentationDesc_Region_Scanline();
  SegmentationDesc_Region_Scanline_Interval::default_instance_ = new SegmentationDesc_Region_Scanline_Interval();
  SegmentationDesc_CompoundRegion::default_instance_ = new SegmentationDesc_CompoundRegion();
  SegmentationDesc_Hierarchy::default_instance_ = new SegmentationDesc_Hierarchy();
  SegmentationDesc::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_Region::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_Region_Scanline::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_Region_Scanline_Interval::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_CompoundRegion::default_instance_->InitAsDefaultInstance();
  SegmentationDesc_Hierarchy::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_segmentation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_segmentation_2eproto {
  StaticDescriptorInitializer_segmentation_2eproto() {
    protobuf_AddDesc_segmentation_2eproto();
  }
} static_descriptor_initializer_segmentation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SegmentationDesc_Region_Scanline_Interval::kLeftXFieldNumber;
const int SegmentationDesc_Region_Scanline_Interval::kRightXFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_Region_Scanline_Interval::SegmentationDesc_Region_Scanline_Interval()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_Region_Scanline_Interval::InitAsDefaultInstance() {
}

SegmentationDesc_Region_Scanline_Interval::SegmentationDesc_Region_Scanline_Interval(const SegmentationDesc_Region_Scanline_Interval& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_Region_Scanline_Interval::SharedCtor() {
  _cached_size_ = 0;
  left_x_ = 0u;
  right_x_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_Region_Scanline_Interval::~SegmentationDesc_Region_Scanline_Interval() {
  SharedDtor();
}

void SegmentationDesc_Region_Scanline_Interval::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_Region_Scanline_Interval::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_Region_Scanline_Interval::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_Region_Scanline_Interval_descriptor_;
}

const SegmentationDesc_Region_Scanline_Interval& SegmentationDesc_Region_Scanline_Interval::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_Region_Scanline_Interval* SegmentationDesc_Region_Scanline_Interval::default_instance_ = NULL;

SegmentationDesc_Region_Scanline_Interval* SegmentationDesc_Region_Scanline_Interval::New() const {
  return new SegmentationDesc_Region_Scanline_Interval;
}

void SegmentationDesc_Region_Scanline_Interval::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_x_ = 0u;
    right_x_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_Region_Scanline_Interval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 left_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &left_x_)));
          set_has_left_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_right_x;
        break;
      }

      // required fixed32 right_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_right_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &right_x_)));
          set_has_right_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_Region_Scanline_Interval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 left_x = 1;
  if (has_left_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->left_x(), output);
  }

  // required fixed32 right_x = 2;
  if (has_right_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->right_x(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_Region_Scanline_Interval::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 left_x = 1;
  if (has_left_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->left_x(), target);
  }

  // required fixed32 right_x = 2;
  if (has_right_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->right_x(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_Region_Scanline_Interval::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 left_x = 1;
    if (has_left_x()) {
      total_size += 1 + 4;
    }

    // required fixed32 right_x = 2;
    if (has_right_x()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_Region_Scanline_Interval::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_Region_Scanline_Interval* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_Region_Scanline_Interval*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_Region_Scanline_Interval::MergeFrom(const SegmentationDesc_Region_Scanline_Interval& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_x()) {
      set_left_x(from.left_x());
    }
    if (from.has_right_x()) {
      set_right_x(from.right_x());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_Region_Scanline_Interval::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_Region_Scanline_Interval::CopyFrom(const SegmentationDesc_Region_Scanline_Interval& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_Region_Scanline_Interval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SegmentationDesc_Region_Scanline_Interval::Swap(SegmentationDesc_Region_Scanline_Interval* other) {
  if (other != this) {
    std::swap(left_x_, other->left_x_);
    std::swap(right_x_, other->right_x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_Region_Scanline_Interval::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_Region_Scanline_Interval_descriptor_;
  metadata.reflection = SegmentationDesc_Region_Scanline_Interval_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_Region_Scanline::kIntervalFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_Region_Scanline::SegmentationDesc_Region_Scanline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_Region_Scanline::InitAsDefaultInstance() {
}

SegmentationDesc_Region_Scanline::SegmentationDesc_Region_Scanline(const SegmentationDesc_Region_Scanline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_Region_Scanline::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_Region_Scanline::~SegmentationDesc_Region_Scanline() {
  SharedDtor();
}

void SegmentationDesc_Region_Scanline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_Region_Scanline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_Region_Scanline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_Region_Scanline_descriptor_;
}

const SegmentationDesc_Region_Scanline& SegmentationDesc_Region_Scanline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_Region_Scanline* SegmentationDesc_Region_Scanline::default_instance_ = NULL;

SegmentationDesc_Region_Scanline* SegmentationDesc_Region_Scanline::New() const {
  return new SegmentationDesc_Region_Scanline;
}

void SegmentationDesc_Region_Scanline::Clear() {
  interval_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_Region_Scanline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Segment.SegmentationDesc.Region.Scanline.Interval interval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interval()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_interval;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_Region_Scanline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Segment.SegmentationDesc.Region.Scanline.Interval interval = 1;
  for (int i = 0; i < this->interval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->interval(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_Region_Scanline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Segment.SegmentationDesc.Region.Scanline.Interval interval = 1;
  for (int i = 0; i < this->interval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->interval(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_Region_Scanline::ByteSize() const {
  int total_size = 0;

  // repeated .Segment.SegmentationDesc.Region.Scanline.Interval interval = 1;
  total_size += 1 * this->interval_size();
  for (int i = 0; i < this->interval_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interval(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_Region_Scanline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_Region_Scanline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_Region_Scanline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_Region_Scanline::MergeFrom(const SegmentationDesc_Region_Scanline& from) {
  GOOGLE_CHECK_NE(&from, this);
  interval_.MergeFrom(from.interval_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_Region_Scanline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_Region_Scanline::CopyFrom(const SegmentationDesc_Region_Scanline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_Region_Scanline::IsInitialized() const {

  for (int i = 0; i < interval_size(); i++) {
    if (!this->interval(i).IsInitialized()) return false;
  }
  return true;
}

void SegmentationDesc_Region_Scanline::Swap(SegmentationDesc_Region_Scanline* other) {
  if (other != this) {
    interval_.Swap(&other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_Region_Scanline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_Region_Scanline_descriptor_;
  metadata.reflection = SegmentationDesc_Region_Scanline_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_Region::kIdFieldNumber;
const int SegmentationDesc_Region::kSizeFieldNumber;
const int SegmentationDesc_Region::kNeighborIdFieldNumber;
const int SegmentationDesc_Region::kTopYFieldNumber;
const int SegmentationDesc_Region::kParentIdFieldNumber;
const int SegmentationDesc_Region::kScanlineFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_Region::SegmentationDesc_Region()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_Region::InitAsDefaultInstance() {
}

SegmentationDesc_Region::SegmentationDesc_Region(const SegmentationDesc_Region& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_Region::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  size_ = 0u;
  top_y_ = 0u;
  parent_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_Region::~SegmentationDesc_Region() {
  SharedDtor();
}

void SegmentationDesc_Region::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_Region::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_Region_descriptor_;
}

const SegmentationDesc_Region& SegmentationDesc_Region::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_Region* SegmentationDesc_Region::default_instance_ = NULL;

SegmentationDesc_Region* SegmentationDesc_Region::New() const {
  return new SegmentationDesc_Region;
}

void SegmentationDesc_Region::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    size_ = 0u;
    top_y_ = 0u;
    parent_id_ = 0u;
  }
  neighbor_id_.Clear();
  scanline_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_size;
        break;
      }

      // required fixed32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_neighbor_id;
        break;
      }

      // repeated fixed32 neighbor_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_neighbor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29, input, this->mutable_neighbor_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_neighbor_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_neighbor_id;
        if (input->ExpectTag(37)) goto parse_top_y;
        break;
      }

      // required fixed32 top_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_top_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &top_y_)));
          set_has_top_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_parent_id;
        break;
      }

      // optional fixed32 parent_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_scanline;
        break;
      }

      // repeated .Segment.SegmentationDesc.Region.Scanline scanline = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scanline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scanline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_scanline;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // required fixed32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->size(), output);
  }

  // repeated fixed32 neighbor_id = 3;
  for (int i = 0; i < this->neighbor_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->neighbor_id(i), output);
  }

  // required fixed32 top_y = 4;
  if (has_top_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->top_y(), output);
  }

  // optional fixed32 parent_id = 5;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->parent_id(), output);
  }

  // repeated .Segment.SegmentationDesc.Region.Scanline scanline = 6;
  for (int i = 0; i < this->scanline_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->scanline(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_Region::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // required fixed32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->size(), target);
  }

  // repeated fixed32 neighbor_id = 3;
  for (int i = 0; i < this->neighbor_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(3, this->neighbor_id(i), target);
  }

  // required fixed32 top_y = 4;
  if (has_top_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->top_y(), target);
  }

  // optional fixed32 parent_id = 5;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->parent_id(), target);
  }

  // repeated .Segment.SegmentationDesc.Region.Scanline scanline = 6;
  for (int i = 0; i < this->scanline_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->scanline(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_Region::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 size = 2;
    if (has_size()) {
      total_size += 1 + 4;
    }

    // required fixed32 top_y = 4;
    if (has_top_y()) {
      total_size += 1 + 4;
    }

    // optional fixed32 parent_id = 5;
    if (has_parent_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated fixed32 neighbor_id = 3;
  {
    int data_size = 0;
    data_size = 4 * this->neighbor_id_size();
    total_size += 1 * this->neighbor_id_size() + data_size;
  }

  // repeated .Segment.SegmentationDesc.Region.Scanline scanline = 6;
  total_size += 1 * this->scanline_size();
  for (int i = 0; i < this->scanline_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scanline(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_Region::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_Region* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_Region*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_Region::MergeFrom(const SegmentationDesc_Region& from) {
  GOOGLE_CHECK_NE(&from, this);
  neighbor_id_.MergeFrom(from.neighbor_id_);
  scanline_.MergeFrom(from.scanline_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_top_y()) {
      set_top_y(from.top_y());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_Region::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_Region::CopyFrom(const SegmentationDesc_Region& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_Region::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < scanline_size(); i++) {
    if (!this->scanline(i).IsInitialized()) return false;
  }
  return true;
}

void SegmentationDesc_Region::Swap(SegmentationDesc_Region* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    neighbor_id_.Swap(&other->neighbor_id_);
    std::swap(top_y_, other->top_y_);
    std::swap(parent_id_, other->parent_id_);
    scanline_.Swap(&other->scanline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_Region::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_Region_descriptor_;
  metadata.reflection = SegmentationDesc_Region_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_CompoundRegion::kIdFieldNumber;
const int SegmentationDesc_CompoundRegion::kSizeFieldNumber;
const int SegmentationDesc_CompoundRegion::kNeighborIdFieldNumber;
const int SegmentationDesc_CompoundRegion::kParentIdFieldNumber;
const int SegmentationDesc_CompoundRegion::kChildIdFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_CompoundRegion::SegmentationDesc_CompoundRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_CompoundRegion::InitAsDefaultInstance() {
}

SegmentationDesc_CompoundRegion::SegmentationDesc_CompoundRegion(const SegmentationDesc_CompoundRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_CompoundRegion::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  size_ = 0u;
  parent_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_CompoundRegion::~SegmentationDesc_CompoundRegion() {
  SharedDtor();
}

void SegmentationDesc_CompoundRegion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_CompoundRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_CompoundRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_CompoundRegion_descriptor_;
}

const SegmentationDesc_CompoundRegion& SegmentationDesc_CompoundRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_CompoundRegion* SegmentationDesc_CompoundRegion::default_instance_ = NULL;

SegmentationDesc_CompoundRegion* SegmentationDesc_CompoundRegion::New() const {
  return new SegmentationDesc_CompoundRegion;
}

void SegmentationDesc_CompoundRegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    size_ = 0u;
    parent_id_ = 0u;
  }
  neighbor_id_.Clear();
  child_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_CompoundRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_size;
        break;
      }

      // required fixed32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_neighbor_id;
        break;
      }

      // repeated fixed32 neighbor_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_neighbor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 29, input, this->mutable_neighbor_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_neighbor_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_neighbor_id;
        if (input->ExpectTag(37)) goto parse_parent_id;
        break;
      }

      // optional fixed32 parent_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_parent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &parent_id_)));
          set_has_parent_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_child_id;
        break;
      }

      // repeated fixed32 child_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 45, input, this->mutable_child_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_child_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_child_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_CompoundRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // required fixed32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->size(), output);
  }

  // repeated fixed32 neighbor_id = 3;
  for (int i = 0; i < this->neighbor_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      3, this->neighbor_id(i), output);
  }

  // optional fixed32 parent_id = 4;
  if (has_parent_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->parent_id(), output);
  }

  // repeated fixed32 child_id = 5;
  for (int i = 0; i < this->child_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      5, this->child_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_CompoundRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // required fixed32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->size(), target);
  }

  // repeated fixed32 neighbor_id = 3;
  for (int i = 0; i < this->neighbor_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(3, this->neighbor_id(i), target);
  }

  // optional fixed32 parent_id = 4;
  if (has_parent_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->parent_id(), target);
  }

  // repeated fixed32 child_id = 5;
  for (int i = 0; i < this->child_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32ToArray(5, this->child_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_CompoundRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // required fixed32 size = 2;
    if (has_size()) {
      total_size += 1 + 4;
    }

    // optional fixed32 parent_id = 4;
    if (has_parent_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated fixed32 neighbor_id = 3;
  {
    int data_size = 0;
    data_size = 4 * this->neighbor_id_size();
    total_size += 1 * this->neighbor_id_size() + data_size;
  }

  // repeated fixed32 child_id = 5;
  {
    int data_size = 0;
    data_size = 4 * this->child_id_size();
    total_size += 1 * this->child_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_CompoundRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_CompoundRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_CompoundRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_CompoundRegion::MergeFrom(const SegmentationDesc_CompoundRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  neighbor_id_.MergeFrom(from.neighbor_id_);
  child_id_.MergeFrom(from.child_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_parent_id()) {
      set_parent_id(from.parent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_CompoundRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_CompoundRegion::CopyFrom(const SegmentationDesc_CompoundRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_CompoundRegion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SegmentationDesc_CompoundRegion::Swap(SegmentationDesc_CompoundRegion* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(size_, other->size_);
    neighbor_id_.Swap(&other->neighbor_id_);
    std::swap(parent_id_, other->parent_id_);
    child_id_.Swap(&other->child_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_CompoundRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_CompoundRegion_descriptor_;
  metadata.reflection = SegmentationDesc_CompoundRegion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc_Hierarchy::kLevelFieldNumber;
const int SegmentationDesc_Hierarchy::kMaxIdFieldNumber;
const int SegmentationDesc_Hierarchy::kRegionFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc_Hierarchy::SegmentationDesc_Hierarchy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc_Hierarchy::InitAsDefaultInstance() {
}

SegmentationDesc_Hierarchy::SegmentationDesc_Hierarchy(const SegmentationDesc_Hierarchy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc_Hierarchy::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  max_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc_Hierarchy::~SegmentationDesc_Hierarchy() {
  SharedDtor();
}

void SegmentationDesc_Hierarchy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc_Hierarchy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc_Hierarchy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_Hierarchy_descriptor_;
}

const SegmentationDesc_Hierarchy& SegmentationDesc_Hierarchy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc_Hierarchy* SegmentationDesc_Hierarchy::default_instance_ = NULL;

SegmentationDesc_Hierarchy* SegmentationDesc_Hierarchy::New() const {
  return new SegmentationDesc_Hierarchy;
}

void SegmentationDesc_Hierarchy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    max_id_ = 0u;
  }
  region_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc_Hierarchy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_max_id;
        break;
      }

      // required fixed32 max_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_id_)));
          set_has_max_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_region;
        break;
      }

      // repeated .Segment.SegmentationDesc.CompoundRegion region = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_region;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc_Hierarchy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->level(), output);
  }

  // required fixed32 max_id = 2;
  if (has_max_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->max_id(), output);
  }

  // repeated .Segment.SegmentationDesc.CompoundRegion region = 3;
  for (int i = 0; i < this->region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->region(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc_Hierarchy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->level(), target);
  }

  // required fixed32 max_id = 2;
  if (has_max_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->max_id(), target);
  }

  // repeated .Segment.SegmentationDesc.CompoundRegion region = 3;
  for (int i = 0; i < this->region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->region(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc_Hierarchy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 level = 1;
    if (has_level()) {
      total_size += 1 + 4;
    }

    // required fixed32 max_id = 2;
    if (has_max_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated .Segment.SegmentationDesc.CompoundRegion region = 3;
  total_size += 1 * this->region_size();
  for (int i = 0; i < this->region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc_Hierarchy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc_Hierarchy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc_Hierarchy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc_Hierarchy::MergeFrom(const SegmentationDesc_Hierarchy& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_.MergeFrom(from.region_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_max_id()) {
      set_max_id(from.max_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc_Hierarchy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc_Hierarchy::CopyFrom(const SegmentationDesc_Hierarchy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc_Hierarchy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < region_size(); i++) {
    if (!this->region(i).IsInitialized()) return false;
  }
  return true;
}

void SegmentationDesc_Hierarchy::Swap(SegmentationDesc_Hierarchy* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(max_id_, other->max_id_);
    region_.Swap(&other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc_Hierarchy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_Hierarchy_descriptor_;
  metadata.reflection = SegmentationDesc_Hierarchy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SegmentationDesc::kMaxIdFieldNumber;
const int SegmentationDesc::kRegionFieldNumber;
const int SegmentationDesc::kHierarchyFieldNumber;
const int SegmentationDesc::kFrameWidthFieldNumber;
const int SegmentationDesc::kFrameHeightFieldNumber;
#endif  // !_MSC_VER

SegmentationDesc::SegmentationDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SegmentationDesc::InitAsDefaultInstance() {
}

SegmentationDesc::SegmentationDesc(const SegmentationDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SegmentationDesc::SharedCtor() {
  _cached_size_ = 0;
  max_id_ = 0u;
  frame_width_ = 0;
  frame_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SegmentationDesc::~SegmentationDesc() {
  SharedDtor();
}

void SegmentationDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SegmentationDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SegmentationDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SegmentationDesc_descriptor_;
}

const SegmentationDesc& SegmentationDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_segmentation_2eproto();
  return *default_instance_;
}

SegmentationDesc* SegmentationDesc::default_instance_ = NULL;

SegmentationDesc* SegmentationDesc::New() const {
  return new SegmentationDesc;
}

void SegmentationDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_id_ = 0u;
    frame_width_ = 0;
    frame_height_ = 0;
  }
  region_.Clear();
  hierarchy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SegmentationDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 max_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &max_id_)));
          set_has_max_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }

      // repeated .Segment.SegmentationDesc.Region region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_region()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region;
        if (input->ExpectTag(26)) goto parse_hierarchy;
        break;
      }

      // repeated .Segment.SegmentationDesc.Hierarchy hierarchy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hierarchy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hierarchy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hierarchy;
        if (input->ExpectTag(32)) goto parse_frame_width;
        break;
      }

      // optional int32 frame_width = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_width_)));
          set_has_frame_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_frame_height;
        break;
      }

      // optional int32 frame_height = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_height_)));
          set_has_frame_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SegmentationDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed32 max_id = 1;
  if (has_max_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->max_id(), output);
  }

  // repeated .Segment.SegmentationDesc.Region region = 2;
  for (int i = 0; i < this->region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->region(i), output);
  }

  // repeated .Segment.SegmentationDesc.Hierarchy hierarchy = 3;
  for (int i = 0; i < this->hierarchy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hierarchy(i), output);
  }

  // optional int32 frame_width = 4 [default = 0];
  if (has_frame_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frame_width(), output);
  }

  // optional int32 frame_height = 5 [default = 0];
  if (has_frame_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frame_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SegmentationDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 max_id = 1;
  if (has_max_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->max_id(), target);
  }

  // repeated .Segment.SegmentationDesc.Region region = 2;
  for (int i = 0; i < this->region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->region(i), target);
  }

  // repeated .Segment.SegmentationDesc.Hierarchy hierarchy = 3;
  for (int i = 0; i < this->hierarchy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hierarchy(i), target);
  }

  // optional int32 frame_width = 4 [default = 0];
  if (has_frame_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frame_width(), target);
  }

  // optional int32 frame_height = 5 [default = 0];
  if (has_frame_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frame_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SegmentationDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 max_id = 1;
    if (has_max_id()) {
      total_size += 1 + 4;
    }

    // optional int32 frame_width = 4 [default = 0];
    if (has_frame_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_width());
    }

    // optional int32 frame_height = 5 [default = 0];
    if (has_frame_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_height());
    }

  }
  // repeated .Segment.SegmentationDesc.Region region = 2;
  total_size += 1 * this->region_size();
  for (int i = 0; i < this->region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region(i));
  }

  // repeated .Segment.SegmentationDesc.Hierarchy hierarchy = 3;
  total_size += 1 * this->hierarchy_size();
  for (int i = 0; i < this->hierarchy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hierarchy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SegmentationDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SegmentationDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SegmentationDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SegmentationDesc::MergeFrom(const SegmentationDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  region_.MergeFrom(from.region_);
  hierarchy_.MergeFrom(from.hierarchy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_id()) {
      set_max_id(from.max_id());
    }
    if (from.has_frame_width()) {
      set_frame_width(from.frame_width());
    }
    if (from.has_frame_height()) {
      set_frame_height(from.frame_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SegmentationDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SegmentationDesc::CopyFrom(const SegmentationDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SegmentationDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < region_size(); i++) {
    if (!this->region(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hierarchy_size(); i++) {
    if (!this->hierarchy(i).IsInitialized()) return false;
  }
  return true;
}

void SegmentationDesc::Swap(SegmentationDesc* other) {
  if (other != this) {
    std::swap(max_id_, other->max_id_);
    region_.Swap(&other->region_);
    hierarchy_.Swap(&other->hierarchy_);
    std::swap(frame_width_, other->frame_width_);
    std::swap(frame_height_, other->frame_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SegmentationDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SegmentationDesc_descriptor_;
  metadata.reflection = SegmentationDesc_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Segment

// @@protoc_insertion_point(global_scope)
