// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: segmentation.proto

#ifndef PROTOBUF_segmentation_2eproto__INCLUDED
#define PROTOBUF_segmentation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Segment {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_segmentation_2eproto();
void protobuf_AssignDesc_segmentation_2eproto();
void protobuf_ShutdownFile_segmentation_2eproto();

class SegmentationDesc;
class SegmentationDesc_Region;
class SegmentationDesc_Region_Scanline;
class SegmentationDesc_Region_Scanline_Interval;
class SegmentationDesc_CompoundRegion;
class SegmentationDesc_Hierarchy;

// ===================================================================

class SegmentationDesc_Region_Scanline_Interval : public ::google::protobuf::Message {
 public:
  SegmentationDesc_Region_Scanline_Interval();
  virtual ~SegmentationDesc_Region_Scanline_Interval();

  SegmentationDesc_Region_Scanline_Interval(const SegmentationDesc_Region_Scanline_Interval& from);

  inline SegmentationDesc_Region_Scanline_Interval& operator=(const SegmentationDesc_Region_Scanline_Interval& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentationDesc_Region_Scanline_Interval& default_instance();

  void Swap(SegmentationDesc_Region_Scanline_Interval* other);

  // implements Message ----------------------------------------------

  SegmentationDesc_Region_Scanline_Interval* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentationDesc_Region_Scanline_Interval& from);
  void MergeFrom(const SegmentationDesc_Region_Scanline_Interval& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 left_x = 1;
  inline bool has_left_x() const;
  inline void clear_left_x();
  static const int kLeftXFieldNumber = 1;
  inline ::google::protobuf::uint32 left_x() const;
  inline void set_left_x(::google::protobuf::uint32 value);

  // required fixed32 right_x = 2;
  inline bool has_right_x() const;
  inline void clear_right_x();
  static const int kRightXFieldNumber = 2;
  inline ::google::protobuf::uint32 right_x() const;
  inline void set_right_x(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Segment.SegmentationDesc.Region.Scanline.Interval)
 private:
  inline void set_has_left_x();
  inline void clear_has_left_x();
  inline void set_has_right_x();
  inline void clear_has_right_x();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 left_x_;
  ::google::protobuf::uint32 right_x_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_segmentation_2eproto();
  friend void protobuf_AssignDesc_segmentation_2eproto();
  friend void protobuf_ShutdownFile_segmentation_2eproto();

  void InitAsDefaultInstance();
  static SegmentationDesc_Region_Scanline_Interval* default_instance_;
};
// -------------------------------------------------------------------

class SegmentationDesc_Region_Scanline : public ::google::protobuf::Message {
 public:
  SegmentationDesc_Region_Scanline();
  virtual ~SegmentationDesc_Region_Scanline();

  SegmentationDesc_Region_Scanline(const SegmentationDesc_Region_Scanline& from);

  inline SegmentationDesc_Region_Scanline& operator=(const SegmentationDesc_Region_Scanline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentationDesc_Region_Scanline& default_instance();

  void Swap(SegmentationDesc_Region_Scanline* other);

  // implements Message ----------------------------------------------

  SegmentationDesc_Region_Scanline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentationDesc_Region_Scanline& from);
  void MergeFrom(const SegmentationDesc_Region_Scanline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SegmentationDesc_Region_Scanline_Interval Interval;

  // accessors -------------------------------------------------------

  // repeated .Segment.SegmentationDesc.Region.Scanline.Interval interval = 1;
  inline int interval_size() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 1;
  inline const ::Segment::SegmentationDesc_Region_Scanline_Interval& interval(int index) const;
  inline ::Segment::SegmentationDesc_Region_Scanline_Interval* mutable_interval(int index);
  inline ::Segment::SegmentationDesc_Region_Scanline_Interval* add_interval();
  inline const ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region_Scanline_Interval >&
      interval() const;
  inline ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region_Scanline_Interval >*
      mutable_interval();

  // @@protoc_insertion_point(class_scope:Segment.SegmentationDesc.Region.Scanline)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region_Scanline_Interval > interval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_segmentation_2eproto();
  friend void protobuf_AssignDesc_segmentation_2eproto();
  friend void protobuf_ShutdownFile_segmentation_2eproto();

  void InitAsDefaultInstance();
  static SegmentationDesc_Region_Scanline* default_instance_;
};
// -------------------------------------------------------------------

class SegmentationDesc_Region : public ::google::protobuf::Message {
 public:
  SegmentationDesc_Region();
  virtual ~SegmentationDesc_Region();

  SegmentationDesc_Region(const SegmentationDesc_Region& from);

  inline SegmentationDesc_Region& operator=(const SegmentationDesc_Region& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentationDesc_Region& default_instance();

  void Swap(SegmentationDesc_Region* other);

  // implements Message ----------------------------------------------

  SegmentationDesc_Region* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentationDesc_Region& from);
  void MergeFrom(const SegmentationDesc_Region& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SegmentationDesc_Region_Scanline Scanline;

  // accessors -------------------------------------------------------

  // required fixed32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required fixed32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // repeated fixed32 neighbor_id = 3;
  inline int neighbor_id_size() const;
  inline void clear_neighbor_id();
  static const int kNeighborIdFieldNumber = 3;
  inline ::google::protobuf::uint32 neighbor_id(int index) const;
  inline void set_neighbor_id(int index, ::google::protobuf::uint32 value);
  inline void add_neighbor_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      neighbor_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_neighbor_id();

  // required fixed32 top_y = 4;
  inline bool has_top_y() const;
  inline void clear_top_y();
  static const int kTopYFieldNumber = 4;
  inline ::google::protobuf::uint32 top_y() const;
  inline void set_top_y(::google::protobuf::uint32 value);

  // optional fixed32 parent_id = 5;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 5;
  inline ::google::protobuf::uint32 parent_id() const;
  inline void set_parent_id(::google::protobuf::uint32 value);

  // repeated .Segment.SegmentationDesc.Region.Scanline scanline = 6;
  inline int scanline_size() const;
  inline void clear_scanline();
  static const int kScanlineFieldNumber = 6;
  inline const ::Segment::SegmentationDesc_Region_Scanline& scanline(int index) const;
  inline ::Segment::SegmentationDesc_Region_Scanline* mutable_scanline(int index);
  inline ::Segment::SegmentationDesc_Region_Scanline* add_scanline();
  inline const ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region_Scanline >&
      scanline() const;
  inline ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region_Scanline >*
      mutable_scanline();

  // @@protoc_insertion_point(class_scope:Segment.SegmentationDesc.Region)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_top_y();
  inline void clear_has_top_y();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > neighbor_id_;
  ::google::protobuf::uint32 top_y_;
  ::google::protobuf::uint32 parent_id_;
  ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region_Scanline > scanline_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_segmentation_2eproto();
  friend void protobuf_AssignDesc_segmentation_2eproto();
  friend void protobuf_ShutdownFile_segmentation_2eproto();

  void InitAsDefaultInstance();
  static SegmentationDesc_Region* default_instance_;
};
// -------------------------------------------------------------------

class SegmentationDesc_CompoundRegion : public ::google::protobuf::Message {
 public:
  SegmentationDesc_CompoundRegion();
  virtual ~SegmentationDesc_CompoundRegion();

  SegmentationDesc_CompoundRegion(const SegmentationDesc_CompoundRegion& from);

  inline SegmentationDesc_CompoundRegion& operator=(const SegmentationDesc_CompoundRegion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentationDesc_CompoundRegion& default_instance();

  void Swap(SegmentationDesc_CompoundRegion* other);

  // implements Message ----------------------------------------------

  SegmentationDesc_CompoundRegion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentationDesc_CompoundRegion& from);
  void MergeFrom(const SegmentationDesc_CompoundRegion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required fixed32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // repeated fixed32 neighbor_id = 3;
  inline int neighbor_id_size() const;
  inline void clear_neighbor_id();
  static const int kNeighborIdFieldNumber = 3;
  inline ::google::protobuf::uint32 neighbor_id(int index) const;
  inline void set_neighbor_id(int index, ::google::protobuf::uint32 value);
  inline void add_neighbor_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      neighbor_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_neighbor_id();

  // optional fixed32 parent_id = 4;
  inline bool has_parent_id() const;
  inline void clear_parent_id();
  static const int kParentIdFieldNumber = 4;
  inline ::google::protobuf::uint32 parent_id() const;
  inline void set_parent_id(::google::protobuf::uint32 value);

  // repeated fixed32 child_id = 5;
  inline int child_id_size() const;
  inline void clear_child_id();
  static const int kChildIdFieldNumber = 5;
  inline ::google::protobuf::uint32 child_id(int index) const;
  inline void set_child_id(int index, ::google::protobuf::uint32 value);
  inline void add_child_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      child_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_child_id();

  // @@protoc_insertion_point(class_scope:Segment.SegmentationDesc.CompoundRegion)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_parent_id();
  inline void clear_has_parent_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > neighbor_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > child_id_;
  ::google::protobuf::uint32 parent_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_segmentation_2eproto();
  friend void protobuf_AssignDesc_segmentation_2eproto();
  friend void protobuf_ShutdownFile_segmentation_2eproto();

  void InitAsDefaultInstance();
  static SegmentationDesc_CompoundRegion* default_instance_;
};
// -------------------------------------------------------------------

class SegmentationDesc_Hierarchy : public ::google::protobuf::Message {
 public:
  SegmentationDesc_Hierarchy();
  virtual ~SegmentationDesc_Hierarchy();

  SegmentationDesc_Hierarchy(const SegmentationDesc_Hierarchy& from);

  inline SegmentationDesc_Hierarchy& operator=(const SegmentationDesc_Hierarchy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentationDesc_Hierarchy& default_instance();

  void Swap(SegmentationDesc_Hierarchy* other);

  // implements Message ----------------------------------------------

  SegmentationDesc_Hierarchy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentationDesc_Hierarchy& from);
  void MergeFrom(const SegmentationDesc_Hierarchy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required fixed32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required fixed32 max_id = 2;
  inline bool has_max_id() const;
  inline void clear_max_id();
  static const int kMaxIdFieldNumber = 2;
  inline ::google::protobuf::uint32 max_id() const;
  inline void set_max_id(::google::protobuf::uint32 value);

  // repeated .Segment.SegmentationDesc.CompoundRegion region = 3;
  inline int region_size() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 3;
  inline const ::Segment::SegmentationDesc_CompoundRegion& region(int index) const;
  inline ::Segment::SegmentationDesc_CompoundRegion* mutable_region(int index);
  inline ::Segment::SegmentationDesc_CompoundRegion* add_region();
  inline const ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_CompoundRegion >&
      region() const;
  inline ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_CompoundRegion >*
      mutable_region();

  // @@protoc_insertion_point(class_scope:Segment.SegmentationDesc.Hierarchy)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_max_id();
  inline void clear_has_max_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 max_id_;
  ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_CompoundRegion > region_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_segmentation_2eproto();
  friend void protobuf_AssignDesc_segmentation_2eproto();
  friend void protobuf_ShutdownFile_segmentation_2eproto();

  void InitAsDefaultInstance();
  static SegmentationDesc_Hierarchy* default_instance_;
};
// -------------------------------------------------------------------

class SegmentationDesc : public ::google::protobuf::Message {
 public:
  SegmentationDesc();
  virtual ~SegmentationDesc();

  SegmentationDesc(const SegmentationDesc& from);

  inline SegmentationDesc& operator=(const SegmentationDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SegmentationDesc& default_instance();

  void Swap(SegmentationDesc* other);

  // implements Message ----------------------------------------------

  SegmentationDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SegmentationDesc& from);
  void MergeFrom(const SegmentationDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SegmentationDesc_Region Region;
  typedef SegmentationDesc_CompoundRegion CompoundRegion;
  typedef SegmentationDesc_Hierarchy Hierarchy;

  // accessors -------------------------------------------------------

  // required fixed32 max_id = 1;
  inline bool has_max_id() const;
  inline void clear_max_id();
  static const int kMaxIdFieldNumber = 1;
  inline ::google::protobuf::uint32 max_id() const;
  inline void set_max_id(::google::protobuf::uint32 value);

  // repeated .Segment.SegmentationDesc.Region region = 2;
  inline int region_size() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline const ::Segment::SegmentationDesc_Region& region(int index) const;
  inline ::Segment::SegmentationDesc_Region* mutable_region(int index);
  inline ::Segment::SegmentationDesc_Region* add_region();
  inline const ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region >&
      region() const;
  inline ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region >*
      mutable_region();

  // repeated .Segment.SegmentationDesc.Hierarchy hierarchy = 3;
  inline int hierarchy_size() const;
  inline void clear_hierarchy();
  static const int kHierarchyFieldNumber = 3;
  inline const ::Segment::SegmentationDesc_Hierarchy& hierarchy(int index) const;
  inline ::Segment::SegmentationDesc_Hierarchy* mutable_hierarchy(int index);
  inline ::Segment::SegmentationDesc_Hierarchy* add_hierarchy();
  inline const ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Hierarchy >&
      hierarchy() const;
  inline ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Hierarchy >*
      mutable_hierarchy();

  // optional int32 frame_width = 4 [default = 0];
  inline bool has_frame_width() const;
  inline void clear_frame_width();
  static const int kFrameWidthFieldNumber = 4;
  inline ::google::protobuf::int32 frame_width() const;
  inline void set_frame_width(::google::protobuf::int32 value);

  // optional int32 frame_height = 5 [default = 0];
  inline bool has_frame_height() const;
  inline void clear_frame_height();
  static const int kFrameHeightFieldNumber = 5;
  inline ::google::protobuf::int32 frame_height() const;
  inline void set_frame_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Segment.SegmentationDesc)
 private:
  inline void set_has_max_id();
  inline void clear_has_max_id();
  inline void set_has_frame_width();
  inline void clear_has_frame_width();
  inline void set_has_frame_height();
  inline void clear_has_frame_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region > region_;
  ::google::protobuf::uint32 max_id_;
  ::google::protobuf::int32 frame_width_;
  ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Hierarchy > hierarchy_;
  ::google::protobuf::int32 frame_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_segmentation_2eproto();
  friend void protobuf_AssignDesc_segmentation_2eproto();
  friend void protobuf_ShutdownFile_segmentation_2eproto();

  void InitAsDefaultInstance();
  static SegmentationDesc* default_instance_;
};
// ===================================================================


// ===================================================================

// SegmentationDesc_Region_Scanline_Interval

// required fixed32 left_x = 1;
inline bool SegmentationDesc_Region_Scanline_Interval::has_left_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegmentationDesc_Region_Scanline_Interval::set_has_left_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SegmentationDesc_Region_Scanline_Interval::clear_has_left_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SegmentationDesc_Region_Scanline_Interval::clear_left_x() {
  left_x_ = 0u;
  clear_has_left_x();
}
inline ::google::protobuf::uint32 SegmentationDesc_Region_Scanline_Interval::left_x() const {
  return left_x_;
}
inline void SegmentationDesc_Region_Scanline_Interval::set_left_x(::google::protobuf::uint32 value) {
  set_has_left_x();
  left_x_ = value;
}

// required fixed32 right_x = 2;
inline bool SegmentationDesc_Region_Scanline_Interval::has_right_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SegmentationDesc_Region_Scanline_Interval::set_has_right_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SegmentationDesc_Region_Scanline_Interval::clear_has_right_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SegmentationDesc_Region_Scanline_Interval::clear_right_x() {
  right_x_ = 0u;
  clear_has_right_x();
}
inline ::google::protobuf::uint32 SegmentationDesc_Region_Scanline_Interval::right_x() const {
  return right_x_;
}
inline void SegmentationDesc_Region_Scanline_Interval::set_right_x(::google::protobuf::uint32 value) {
  set_has_right_x();
  right_x_ = value;
}

// -------------------------------------------------------------------

// SegmentationDesc_Region_Scanline

// repeated .Segment.SegmentationDesc.Region.Scanline.Interval interval = 1;
inline int SegmentationDesc_Region_Scanline::interval_size() const {
  return interval_.size();
}
inline void SegmentationDesc_Region_Scanline::clear_interval() {
  interval_.Clear();
}
inline const ::Segment::SegmentationDesc_Region_Scanline_Interval& SegmentationDesc_Region_Scanline::interval(int index) const {
  return interval_.Get(index);
}
inline ::Segment::SegmentationDesc_Region_Scanline_Interval* SegmentationDesc_Region_Scanline::mutable_interval(int index) {
  return interval_.Mutable(index);
}
inline ::Segment::SegmentationDesc_Region_Scanline_Interval* SegmentationDesc_Region_Scanline::add_interval() {
  return interval_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region_Scanline_Interval >&
SegmentationDesc_Region_Scanline::interval() const {
  return interval_;
}
inline ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region_Scanline_Interval >*
SegmentationDesc_Region_Scanline::mutable_interval() {
  return &interval_;
}

// -------------------------------------------------------------------

// SegmentationDesc_Region

// required fixed32 id = 1;
inline bool SegmentationDesc_Region::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegmentationDesc_Region::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SegmentationDesc_Region::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SegmentationDesc_Region::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SegmentationDesc_Region::id() const {
  return id_;
}
inline void SegmentationDesc_Region::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required fixed32 size = 2;
inline bool SegmentationDesc_Region::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SegmentationDesc_Region::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SegmentationDesc_Region::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SegmentationDesc_Region::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 SegmentationDesc_Region::size() const {
  return size_;
}
inline void SegmentationDesc_Region::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// repeated fixed32 neighbor_id = 3;
inline int SegmentationDesc_Region::neighbor_id_size() const {
  return neighbor_id_.size();
}
inline void SegmentationDesc_Region::clear_neighbor_id() {
  neighbor_id_.Clear();
}
inline ::google::protobuf::uint32 SegmentationDesc_Region::neighbor_id(int index) const {
  return neighbor_id_.Get(index);
}
inline void SegmentationDesc_Region::set_neighbor_id(int index, ::google::protobuf::uint32 value) {
  neighbor_id_.Set(index, value);
}
inline void SegmentationDesc_Region::add_neighbor_id(::google::protobuf::uint32 value) {
  neighbor_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SegmentationDesc_Region::neighbor_id() const {
  return neighbor_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SegmentationDesc_Region::mutable_neighbor_id() {
  return &neighbor_id_;
}

// required fixed32 top_y = 4;
inline bool SegmentationDesc_Region::has_top_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SegmentationDesc_Region::set_has_top_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SegmentationDesc_Region::clear_has_top_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SegmentationDesc_Region::clear_top_y() {
  top_y_ = 0u;
  clear_has_top_y();
}
inline ::google::protobuf::uint32 SegmentationDesc_Region::top_y() const {
  return top_y_;
}
inline void SegmentationDesc_Region::set_top_y(::google::protobuf::uint32 value) {
  set_has_top_y();
  top_y_ = value;
}

// optional fixed32 parent_id = 5;
inline bool SegmentationDesc_Region::has_parent_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SegmentationDesc_Region::set_has_parent_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SegmentationDesc_Region::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SegmentationDesc_Region::clear_parent_id() {
  parent_id_ = 0u;
  clear_has_parent_id();
}
inline ::google::protobuf::uint32 SegmentationDesc_Region::parent_id() const {
  return parent_id_;
}
inline void SegmentationDesc_Region::set_parent_id(::google::protobuf::uint32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// repeated .Segment.SegmentationDesc.Region.Scanline scanline = 6;
inline int SegmentationDesc_Region::scanline_size() const {
  return scanline_.size();
}
inline void SegmentationDesc_Region::clear_scanline() {
  scanline_.Clear();
}
inline const ::Segment::SegmentationDesc_Region_Scanline& SegmentationDesc_Region::scanline(int index) const {
  return scanline_.Get(index);
}
inline ::Segment::SegmentationDesc_Region_Scanline* SegmentationDesc_Region::mutable_scanline(int index) {
  return scanline_.Mutable(index);
}
inline ::Segment::SegmentationDesc_Region_Scanline* SegmentationDesc_Region::add_scanline() {
  return scanline_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region_Scanline >&
SegmentationDesc_Region::scanline() const {
  return scanline_;
}
inline ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region_Scanline >*
SegmentationDesc_Region::mutable_scanline() {
  return &scanline_;
}

// -------------------------------------------------------------------

// SegmentationDesc_CompoundRegion

// required fixed32 id = 1;
inline bool SegmentationDesc_CompoundRegion::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegmentationDesc_CompoundRegion::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SegmentationDesc_CompoundRegion::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SegmentationDesc_CompoundRegion::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SegmentationDesc_CompoundRegion::id() const {
  return id_;
}
inline void SegmentationDesc_CompoundRegion::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required fixed32 size = 2;
inline bool SegmentationDesc_CompoundRegion::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SegmentationDesc_CompoundRegion::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SegmentationDesc_CompoundRegion::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SegmentationDesc_CompoundRegion::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 SegmentationDesc_CompoundRegion::size() const {
  return size_;
}
inline void SegmentationDesc_CompoundRegion::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// repeated fixed32 neighbor_id = 3;
inline int SegmentationDesc_CompoundRegion::neighbor_id_size() const {
  return neighbor_id_.size();
}
inline void SegmentationDesc_CompoundRegion::clear_neighbor_id() {
  neighbor_id_.Clear();
}
inline ::google::protobuf::uint32 SegmentationDesc_CompoundRegion::neighbor_id(int index) const {
  return neighbor_id_.Get(index);
}
inline void SegmentationDesc_CompoundRegion::set_neighbor_id(int index, ::google::protobuf::uint32 value) {
  neighbor_id_.Set(index, value);
}
inline void SegmentationDesc_CompoundRegion::add_neighbor_id(::google::protobuf::uint32 value) {
  neighbor_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SegmentationDesc_CompoundRegion::neighbor_id() const {
  return neighbor_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SegmentationDesc_CompoundRegion::mutable_neighbor_id() {
  return &neighbor_id_;
}

// optional fixed32 parent_id = 4;
inline bool SegmentationDesc_CompoundRegion::has_parent_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SegmentationDesc_CompoundRegion::set_has_parent_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SegmentationDesc_CompoundRegion::clear_has_parent_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SegmentationDesc_CompoundRegion::clear_parent_id() {
  parent_id_ = 0u;
  clear_has_parent_id();
}
inline ::google::protobuf::uint32 SegmentationDesc_CompoundRegion::parent_id() const {
  return parent_id_;
}
inline void SegmentationDesc_CompoundRegion::set_parent_id(::google::protobuf::uint32 value) {
  set_has_parent_id();
  parent_id_ = value;
}

// repeated fixed32 child_id = 5;
inline int SegmentationDesc_CompoundRegion::child_id_size() const {
  return child_id_.size();
}
inline void SegmentationDesc_CompoundRegion::clear_child_id() {
  child_id_.Clear();
}
inline ::google::protobuf::uint32 SegmentationDesc_CompoundRegion::child_id(int index) const {
  return child_id_.Get(index);
}
inline void SegmentationDesc_CompoundRegion::set_child_id(int index, ::google::protobuf::uint32 value) {
  child_id_.Set(index, value);
}
inline void SegmentationDesc_CompoundRegion::add_child_id(::google::protobuf::uint32 value) {
  child_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SegmentationDesc_CompoundRegion::child_id() const {
  return child_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SegmentationDesc_CompoundRegion::mutable_child_id() {
  return &child_id_;
}

// -------------------------------------------------------------------

// SegmentationDesc_Hierarchy

// required fixed32 level = 1;
inline bool SegmentationDesc_Hierarchy::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegmentationDesc_Hierarchy::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SegmentationDesc_Hierarchy::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SegmentationDesc_Hierarchy::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 SegmentationDesc_Hierarchy::level() const {
  return level_;
}
inline void SegmentationDesc_Hierarchy::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required fixed32 max_id = 2;
inline bool SegmentationDesc_Hierarchy::has_max_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SegmentationDesc_Hierarchy::set_has_max_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SegmentationDesc_Hierarchy::clear_has_max_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SegmentationDesc_Hierarchy::clear_max_id() {
  max_id_ = 0u;
  clear_has_max_id();
}
inline ::google::protobuf::uint32 SegmentationDesc_Hierarchy::max_id() const {
  return max_id_;
}
inline void SegmentationDesc_Hierarchy::set_max_id(::google::protobuf::uint32 value) {
  set_has_max_id();
  max_id_ = value;
}

// repeated .Segment.SegmentationDesc.CompoundRegion region = 3;
inline int SegmentationDesc_Hierarchy::region_size() const {
  return region_.size();
}
inline void SegmentationDesc_Hierarchy::clear_region() {
  region_.Clear();
}
inline const ::Segment::SegmentationDesc_CompoundRegion& SegmentationDesc_Hierarchy::region(int index) const {
  return region_.Get(index);
}
inline ::Segment::SegmentationDesc_CompoundRegion* SegmentationDesc_Hierarchy::mutable_region(int index) {
  return region_.Mutable(index);
}
inline ::Segment::SegmentationDesc_CompoundRegion* SegmentationDesc_Hierarchy::add_region() {
  return region_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_CompoundRegion >&
SegmentationDesc_Hierarchy::region() const {
  return region_;
}
inline ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_CompoundRegion >*
SegmentationDesc_Hierarchy::mutable_region() {
  return &region_;
}

// -------------------------------------------------------------------

// SegmentationDesc

// required fixed32 max_id = 1;
inline bool SegmentationDesc::has_max_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SegmentationDesc::set_has_max_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SegmentationDesc::clear_has_max_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SegmentationDesc::clear_max_id() {
  max_id_ = 0u;
  clear_has_max_id();
}
inline ::google::protobuf::uint32 SegmentationDesc::max_id() const {
  return max_id_;
}
inline void SegmentationDesc::set_max_id(::google::protobuf::uint32 value) {
  set_has_max_id();
  max_id_ = value;
}

// repeated .Segment.SegmentationDesc.Region region = 2;
inline int SegmentationDesc::region_size() const {
  return region_.size();
}
inline void SegmentationDesc::clear_region() {
  region_.Clear();
}
inline const ::Segment::SegmentationDesc_Region& SegmentationDesc::region(int index) const {
  return region_.Get(index);
}
inline ::Segment::SegmentationDesc_Region* SegmentationDesc::mutable_region(int index) {
  return region_.Mutable(index);
}
inline ::Segment::SegmentationDesc_Region* SegmentationDesc::add_region() {
  return region_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region >&
SegmentationDesc::region() const {
  return region_;
}
inline ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Region >*
SegmentationDesc::mutable_region() {
  return &region_;
}

// repeated .Segment.SegmentationDesc.Hierarchy hierarchy = 3;
inline int SegmentationDesc::hierarchy_size() const {
  return hierarchy_.size();
}
inline void SegmentationDesc::clear_hierarchy() {
  hierarchy_.Clear();
}
inline const ::Segment::SegmentationDesc_Hierarchy& SegmentationDesc::hierarchy(int index) const {
  return hierarchy_.Get(index);
}
inline ::Segment::SegmentationDesc_Hierarchy* SegmentationDesc::mutable_hierarchy(int index) {
  return hierarchy_.Mutable(index);
}
inline ::Segment::SegmentationDesc_Hierarchy* SegmentationDesc::add_hierarchy() {
  return hierarchy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Hierarchy >&
SegmentationDesc::hierarchy() const {
  return hierarchy_;
}
inline ::google::protobuf::RepeatedPtrField< ::Segment::SegmentationDesc_Hierarchy >*
SegmentationDesc::mutable_hierarchy() {
  return &hierarchy_;
}

// optional int32 frame_width = 4 [default = 0];
inline bool SegmentationDesc::has_frame_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SegmentationDesc::set_has_frame_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SegmentationDesc::clear_has_frame_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SegmentationDesc::clear_frame_width() {
  frame_width_ = 0;
  clear_has_frame_width();
}
inline ::google::protobuf::int32 SegmentationDesc::frame_width() const {
  return frame_width_;
}
inline void SegmentationDesc::set_frame_width(::google::protobuf::int32 value) {
  set_has_frame_width();
  frame_width_ = value;
}

// optional int32 frame_height = 5 [default = 0];
inline bool SegmentationDesc::has_frame_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SegmentationDesc::set_has_frame_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SegmentationDesc::clear_has_frame_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SegmentationDesc::clear_frame_height() {
  frame_height_ = 0;
  clear_has_frame_height();
}
inline ::google::protobuf::int32 SegmentationDesc::frame_height() const {
  return frame_height_;
}
inline void SegmentationDesc::set_frame_height(::google::protobuf::int32 value) {
  set_has_frame_height();
  frame_height_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Segment

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_segmentation_2eproto__INCLUDED
