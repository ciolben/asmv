#include "splinedrawer.h"

SplineDrawer::SplineDrawer(QQuickItem *parent) :
    QQuickPaintedItem(parent)
  , m_keys(QMap<ulong, ulong>())
  , m_max(0)
  , m_maxRatio(0.f)
  , m_numKeys(0)
  , m_spline(Spline())
{
}

void SplineDrawer::paint(QPainter *painter)
{
    QColor redcolor = QColor("red");
    QPen pen(redcolor, 1);
    painter->setPen(pen);

   // using namespace magnet::math;

    double const local_width = m_numKeys;
    double const local_height = m_maxRatio;

        int xi, yi;
        double xd, yd;
        for (double x = 0.0; x < local_width; x += 0.5) {
            xd = x;
            yd = spline(x);
            //rasterize on x
            xi = xd - 0.5 <= xd - (int)xd ? (int)xd : (int)(xd + 0.5);

            //rasterize on y
            yi = yd - 0.5 <= yd - (int)yd ? (int)yd : (int)(yd + 0.5);

           painter->drawPoint(xi, yi);
        }

//    for (float x = 0; x < local_width; x += 20) {
//        spline.addPoint(x, local_height * abs(cos(x)));
//    }

//    painter->scale(m_curwidth / local_width, m_curheight / local_height);

   // QList<double> list = QList<double>();
//    int xi, yi;
//    double xd, yd;
//    for (double x = 0.0; x < local_width; x += 0.5) {
//        xd = x;
//        yd = spline(x);
//        //rasterize on x
//        xi = xd - 0.5 <= xd - (int)xd ? (int)xd : (int)(xd + 0.5);

//        //rasterize on y
//        yi = yd - 0.5 <= yd - (int)yd ? (int)yd : (int)(yd + 0.5);

//       painter->drawPoint(xi, yi);
//    }

}

int SplineDrawer::curwidth() const
{
    return m_curwidth;

}

void SplineDrawer::setCurwidth(const int &width)
{
    m_curwidth = width;
}


int SplineDrawer::curheight() const
{
    return m_curheight;

}

void SplineDrawer::setCurheight(const int &height)
{
    m_curheight = height;
}

void SplineDrawer::addKey(ulong time, ulong map)
{
    if (map > m_max) {
        m_max = map;
    }

    float ratio = (float) time / (float) map;
    if (ratio > m_maxRatio) { //TODO : check conversion loss
        m_maxRatio = ratio;
    }

    m_spline.addPoint((double) time, ratio);

    m_keys[time] = map;
    m_numKeys++;
}
